//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Me\Cybernetic\ComputerScience\4Year\1er semestre\COMP\Compiler\Cool - Ivan\Code\CoolCompiler\Cool\Parsing\Cool.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class CoolParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		WHITESPACE=18, BLOCK_COMMENT=19, LINE_COMMENT=20, CLASS=21, ELSE=22, FALSE=23, 
		FI=24, IF=25, IN=26, INHERITS=27, ISVOID=28, LET=29, LOOP=30, POOL=31, 
		THEN=32, WHILE=33, CASE=34, ESAC=35, NEW=36, OF=37, NOT=38, TRUE=39, STRING=40, 
		INT=41, TYPE=42, ID=43, ASSIGNMENT=44, IMPLY=45;
	public const int
		RULE_program = 0, RULE_programBlock = 1, RULE_classDefine = 2, RULE_feature = 3, 
		RULE_formal = 4, RULE_expression = 5;
	public static readonly string[] ruleNames = {
		"program", "programBlock", "classDefine", "feature", "formal", "expression"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'{'", "'}'", "'('", "','", "')'", "':'", "'@'", "'.'", "'~'", 
		"'*'", "'/'", "'+'", "'-'", "'<='", "'<'", "'='", null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, "'<-'", "'=>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "WHITESPACE", "BLOCK_COMMENT", "LINE_COMMENT", 
		"CLASS", "ELSE", "FALSE", "FI", "IF", "IN", "INHERITS", "ISVOID", "LET", 
		"LOOP", "POOL", "THEN", "WHILE", "CASE", "ESAC", "NEW", "OF", "NOT", "TRUE", 
		"STRING", "INT", "TYPE", "ID", "ASSIGNMENT", "IMPLY"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Cool.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CoolParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CoolParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CoolParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ProgramBlockContext programBlock() {
			return GetRuleContext<ProgramBlockContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12; programBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramBlockContext : ParserRuleContext {
		public ProgramBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programBlock; } }
	 
		public ProgramBlockContext() { }
		public virtual void CopyFrom(ProgramBlockContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ClassesContext : ProgramBlockContext {
		public ClassDefineContext classDefine() {
			return GetRuleContext<ClassDefineContext>(0);
		}
		public ProgramBlockContext programBlock() {
			return GetRuleContext<ProgramBlockContext>(0);
		}
		public ClassesContext(ProgramBlockContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClasses(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EofContext : ProgramBlockContext {
		public ITerminalNode Eof() { return GetToken(CoolParser.Eof, 0); }
		public EofContext(ProgramBlockContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEof(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramBlockContext programBlock() {
		ProgramBlockContext _localctx = new ProgramBlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_programBlock);
		try {
			State = 19;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CLASS:
				_localctx = new ClassesContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 14; classDefine();
				State = 15; Match(T__0);
				State = 16; programBlock();
				}
				break;
			case Eof:
				_localctx = new EofContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 18; Match(Eof);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDefineContext : ParserRuleContext {
		public ITerminalNode CLASS() { return GetToken(CoolParser.CLASS, 0); }
		public ITerminalNode[] TYPE() { return GetTokens(CoolParser.TYPE); }
		public ITerminalNode TYPE(int i) {
			return GetToken(CoolParser.TYPE, i);
		}
		public ITerminalNode INHERITS() { return GetToken(CoolParser.INHERITS, 0); }
		public FeatureContext[] feature() {
			return GetRuleContexts<FeatureContext>();
		}
		public FeatureContext feature(int i) {
			return GetRuleContext<FeatureContext>(i);
		}
		public ClassDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDefine; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDefineContext classDefine() {
		ClassDefineContext _localctx = new ClassDefineContext(Context, State);
		EnterRule(_localctx, 4, RULE_classDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 21; Match(CLASS);
			State = 22; Match(TYPE);
			State = 25;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INHERITS) {
				{
				State = 23; Match(INHERITS);
				State = 24; Match(TYPE);
				}
			}

			State = 27; Match(T__1);
			State = 33;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ID) {
				{
				{
				State = 28; feature();
				State = 29; Match(T__0);
				}
				}
				State = 35;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 36; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FeatureContext : ParserRuleContext {
		public FeatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_feature; } }
	 
		public FeatureContext() { }
		public virtual void CopyFrom(FeatureContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PropertyContext : FeatureContext {
		public ITerminalNode ID() { return GetToken(CoolParser.ID, 0); }
		public ITerminalNode TYPE() { return GetToken(CoolParser.TYPE, 0); }
		public ITerminalNode ASSIGNMENT() { return GetToken(CoolParser.ASSIGNMENT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PropertyContext(FeatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MethodContext : FeatureContext {
		public ITerminalNode ID() { return GetToken(CoolParser.ID, 0); }
		public ITerminalNode TYPE() { return GetToken(CoolParser.TYPE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FormalContext[] formal() {
			return GetRuleContexts<FormalContext>();
		}
		public FormalContext formal(int i) {
			return GetRuleContext<FormalContext>(i);
		}
		public MethodContext(FeatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FeatureContext feature() {
		FeatureContext _localctx = new FeatureContext(Context, State);
		EnterRule(_localctx, 6, RULE_feature);
		int _la;
		try {
			State = 67;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				_localctx = new MethodContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 38; Match(ID);
				State = 39; Match(T__3);
				State = 50;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ID) {
					{
					{
					State = 40; formal();
					State = 45;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__4) {
						{
						{
						State = 41; Match(T__4);
						State = 42; formal();
						}
						}
						State = 47;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					}
					State = 52;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 53; Match(T__5);
				State = 54; Match(T__6);
				State = 55; Match(TYPE);
				State = 56; Match(T__1);
				State = 57; expression(0);
				State = 58; Match(T__2);
				}
				break;
			case 2:
				_localctx = new PropertyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 60; Match(ID);
				State = 61; Match(T__6);
				State = 62; Match(TYPE);
				State = 65;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASSIGNMENT) {
					{
					State = 63; Match(ASSIGNMENT);
					State = 64; expression(0);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(CoolParser.ID, 0); }
		public ITerminalNode TYPE() { return GetToken(CoolParser.TYPE, 0); }
		public FormalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formal; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalContext formal() {
		FormalContext _localctx = new FormalContext(Context, State);
		EnterRule(_localctx, 8, RULE_formal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69; Match(ID);
			State = 70; Match(T__6);
			State = 71; Match(TYPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParenthesesContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesesContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParentheses(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MethodCallContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode ID() { return GetToken(CoolParser.ID, 0); }
		public ITerminalNode TYPE() { return GetToken(CoolParser.TYPE, 0); }
		public MethodCallContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparissonContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ComparissonContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisson(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntContext : ExpressionContext {
		public ITerminalNode INT() { return GetToken(CoolParser.INT, 0); }
		public IntContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OwnMethodCallContext : ExpressionContext {
		public ITerminalNode ID() { return GetToken(CoolParser.ID, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OwnMethodCallContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOwnMethodCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsvoidContext : ExpressionContext {
		public ITerminalNode ISVOID() { return GetToken(CoolParser.ISVOID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsvoidContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsvoid(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BlockContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileContext : ExpressionContext {
		public ITerminalNode WHILE() { return GetToken(CoolParser.WHILE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode LOOP() { return GetToken(CoolParser.LOOP, 0); }
		public ITerminalNode POOL() { return GetToken(CoolParser.POOL, 0); }
		public WhileContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdContext : ExpressionContext {
		public ITerminalNode ID() { return GetToken(CoolParser.ID, 0); }
		public IdContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolNotContext : ExpressionContext {
		public ITerminalNode NOT() { return GetToken(CoolParser.NOT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BoolNotContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArithmeticContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArithmeticContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmetic(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentContext : ExpressionContext {
		public ITerminalNode ID() { return GetToken(CoolParser.ID, 0); }
		public ITerminalNode ASSIGNMENT() { return GetToken(CoolParser.ASSIGNMENT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewContext : ExpressionContext {
		public ITerminalNode NEW() { return GetToken(CoolParser.NEW, 0); }
		public ITerminalNode TYPE() { return GetToken(CoolParser.TYPE, 0); }
		public NewContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNew(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LetInContext : ExpressionContext {
		public ITerminalNode LET() { return GetToken(CoolParser.LET, 0); }
		public ITerminalNode[] ID() { return GetTokens(CoolParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(CoolParser.ID, i);
		}
		public ITerminalNode[] TYPE() { return GetTokens(CoolParser.TYPE); }
		public ITerminalNode TYPE(int i) {
			return GetToken(CoolParser.TYPE, i);
		}
		public ITerminalNode IN() { return GetToken(CoolParser.IN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] ASSIGNMENT() { return GetTokens(CoolParser.ASSIGNMENT); }
		public ITerminalNode ASSIGNMENT(int i) {
			return GetToken(CoolParser.ASSIGNMENT, i);
		}
		public LetInContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetIn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfContext : ExpressionContext {
		public ITerminalNode IF() { return GetToken(CoolParser.IF, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(CoolParser.THEN, 0); }
		public ITerminalNode ELSE() { return GetToken(CoolParser.ELSE, 0); }
		public ITerminalNode FI() { return GetToken(CoolParser.FI, 0); }
		public IfContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringContext : ExpressionContext {
		public ITerminalNode STRING() { return GetToken(CoolParser.STRING, 0); }
		public StringContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanContext : ExpressionContext {
		public IToken value;
		public ITerminalNode TRUE() { return GetToken(CoolParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(CoolParser.FALSE, 0); }
		public BooleanContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegativeContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NegativeContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegative(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseContext : ExpressionContext {
		public ITerminalNode CASE() { return GetToken(CoolParser.CASE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode OF() { return GetToken(CoolParser.OF, 0); }
		public ITerminalNode ESAC() { return GetToken(CoolParser.ESAC, 0); }
		public ITerminalNode[] ID() { return GetTokens(CoolParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(CoolParser.ID, i);
		}
		public ITerminalNode[] TYPE() { return GetTokens(CoolParser.TYPE); }
		public ITerminalNode TYPE(int i) {
			return GetToken(CoolParser.TYPE, i);
		}
		public ITerminalNode[] IMPLY() { return GetTokens(CoolParser.IMPLY); }
		public ITerminalNode IMPLY(int i) {
			return GetToken(CoolParser.IMPLY, i);
		}
		public CaseContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 10;
		EnterRecursionRule(_localctx, 10, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 172;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				_localctx = new OwnMethodCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 74; Match(ID);
				State = 75; Match(T__3);
				State = 86;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__3) | (1L << T__9) | (1L << FALSE) | (1L << IF) | (1L << ISVOID) | (1L << LET) | (1L << WHILE) | (1L << CASE) | (1L << NEW) | (1L << NOT) | (1L << TRUE) | (1L << STRING) | (1L << INT) | (1L << ID))) != 0)) {
					{
					{
					State = 76; expression(0);
					State = 81;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__4) {
						{
						{
						State = 77; Match(T__4);
						State = 78; expression(0);
						}
						}
						State = 83;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					}
					State = 88;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 89; Match(T__5);
				}
				break;
			case 2:
				{
				_localctx = new IfContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 90; Match(IF);
				State = 91; expression(0);
				State = 92; Match(THEN);
				State = 93; expression(0);
				State = 94; Match(ELSE);
				State = 95; expression(0);
				State = 96; Match(FI);
				}
				break;
			case 3:
				{
				_localctx = new WhileContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 98; Match(WHILE);
				State = 99; expression(0);
				State = 100; Match(LOOP);
				State = 101; expression(0);
				State = 102; Match(POOL);
				}
				break;
			case 4:
				{
				_localctx = new BlockContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 104; Match(T__1);
				State = 108;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 105; expression(0);
					State = 106; Match(T__0);
					}
					}
					State = 110;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__3) | (1L << T__9) | (1L << FALSE) | (1L << IF) | (1L << ISVOID) | (1L << LET) | (1L << WHILE) | (1L << CASE) | (1L << NEW) | (1L << NOT) | (1L << TRUE) | (1L << STRING) | (1L << INT) | (1L << ID))) != 0) );
				State = 112; Match(T__2);
				}
				break;
			case 5:
				{
				_localctx = new LetInContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 114; Match(LET);
				State = 115; Match(ID);
				State = 116; Match(T__6);
				State = 117; Match(TYPE);
				State = 120;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASSIGNMENT) {
					{
					State = 118; Match(ASSIGNMENT);
					State = 119; expression(0);
					}
				}

				State = 132;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__4) {
					{
					{
					State = 122; Match(T__4);
					State = 123; Match(ID);
					State = 124; Match(T__6);
					State = 125; Match(TYPE);
					State = 128;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ASSIGNMENT) {
						{
						State = 126; Match(ASSIGNMENT);
						State = 127; expression(0);
						}
					}

					}
					}
					State = 134;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 135; Match(IN);
				State = 136; expression(15);
				}
				break;
			case 6:
				{
				_localctx = new CaseContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 137; Match(CASE);
				State = 138; expression(0);
				State = 139; Match(OF);
				State = 147;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 140; Match(ID);
					State = 141; Match(T__6);
					State = 142; Match(TYPE);
					State = 143; Match(IMPLY);
					State = 144; expression(0);
					State = 145; Match(T__0);
					}
					}
					State = 149;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==ID );
				State = 151; Match(ESAC);
				}
				break;
			case 7:
				{
				_localctx = new NewContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 153; Match(NEW);
				State = 154; Match(TYPE);
				}
				break;
			case 8:
				{
				_localctx = new NegativeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 155; Match(T__9);
				State = 156; expression(12);
				}
				break;
			case 9:
				{
				_localctx = new IsvoidContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 157; Match(ISVOID);
				State = 158; expression(11);
				}
				break;
			case 10:
				{
				_localctx = new BoolNotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 159; Match(NOT);
				State = 160; expression(7);
				}
				break;
			case 11:
				{
				_localctx = new ParenthesesContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 161; Match(T__3);
				State = 162; expression(0);
				State = 163; Match(T__5);
				}
				break;
			case 12:
				{
				_localctx = new IdContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 165; Match(ID);
				}
				break;
			case 13:
				{
				_localctx = new IntContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 166; Match(INT);
				}
				break;
			case 14:
				{
				_localctx = new StringContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 167; Match(STRING);
				}
				break;
			case 15:
				{
				_localctx = new BooleanContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 168;
				((BooleanContext)_localctx).value = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FALSE || _la==TRUE) ) {
					((BooleanContext)_localctx).value = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 16:
				{
				_localctx = new AssignmentContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 169; Match(ID);
				State = 170; Match(ASSIGNMENT);
				State = 171; expression(1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 207;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 205;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
					case 1:
						{
						_localctx = new ArithmeticContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 174;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 175;
						((ArithmeticContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__10 || _la==T__11) ) {
							((ArithmeticContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 176; expression(11);
						}
						break;
					case 2:
						{
						_localctx = new ArithmeticContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 177;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 178;
						((ArithmeticContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__12 || _la==T__13) ) {
							((ArithmeticContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 179; expression(10);
						}
						break;
					case 3:
						{
						_localctx = new ComparissonContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 180;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 181;
						((ComparissonContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__14) | (1L << T__15) | (1L << T__16))) != 0)) ) {
							((ComparissonContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 182; expression(9);
						}
						break;
					case 4:
						{
						_localctx = new MethodCallContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 183;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 186;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==T__7) {
							{
							State = 184; Match(T__7);
							State = 185; Match(TYPE);
							}
						}

						State = 188; Match(T__8);
						State = 189; Match(ID);
						State = 190; Match(T__3);
						State = 201;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__3) | (1L << T__9) | (1L << FALSE) | (1L << IF) | (1L << ISVOID) | (1L << LET) | (1L << WHILE) | (1L << CASE) | (1L << NEW) | (1L << NOT) | (1L << TRUE) | (1L << STRING) | (1L << INT) | (1L << ID))) != 0)) {
							{
							{
							State = 191; expression(0);
							State = 196;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la==T__4) {
								{
								{
								State = 192; Match(T__4);
								State = 193; expression(0);
								}
								}
								State = 198;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
							}
							}
							State = 203;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 204; Match(T__5);
						}
						break;
					}
					} 
				}
				State = 209;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 5: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 10);
		case 1: return Precpred(Context, 9);
		case 2: return Precpred(Context, 8);
		case 3: return Precpred(Context, 20);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '/', '\xD5', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x5', '\x3', '\x16', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x5', '\x4', '\x1C', '\n', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '\"', '\n', '\x4', 
		'\f', '\x4', '\xE', '\x4', '%', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\a', '\x5', '.', '\n', '\x5', '\f', '\x5', '\xE', '\x5', '\x31', '\v', 
		'\x5', '\a', '\x5', '\x33', '\n', '\x5', '\f', '\x5', '\xE', '\x5', '\x36', 
		'\v', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x44', '\n', '\x5', 
		'\x5', '\x5', '\x46', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\a', '\a', 'R', '\n', '\a', '\f', '\a', '\xE', 
		'\a', 'U', '\v', '\a', '\a', '\a', 'W', '\n', '\a', '\f', '\a', '\xE', 
		'\a', 'Z', '\v', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x6', '\a', 'o', 
		'\n', '\a', '\r', '\a', '\xE', '\a', 'p', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x5', '\a', '{', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x83', '\n', '\a', '\a', 
		'\a', '\x85', '\n', '\a', '\f', '\a', '\xE', '\a', '\x88', '\v', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x6', '\a', '\x96', '\n', '\a', '\r', '\a', '\xE', '\a', 
		'\x97', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', 
		'\a', '\xAF', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\xBD', '\n', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\a', '\a', '\xC5', '\n', '\a', '\f', '\a', '\xE', '\a', '\xC8', 
		'\v', '\a', '\a', '\a', '\xCA', '\n', '\a', '\f', '\a', '\xE', '\a', '\xCD', 
		'\v', '\a', '\x3', '\a', '\a', '\a', '\xD0', '\n', '\a', '\f', '\a', '\xE', 
		'\a', '\xD3', '\v', '\a', '\x3', '\a', '\x2', '\x3', '\f', '\b', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\x2', '\x6', '\x4', '\x2', '\x19', '\x19', 
		')', ')', '\x3', '\x2', '\r', '\xE', '\x3', '\x2', '\xF', '\x10', '\x3', 
		'\x2', '\x11', '\x13', '\x2', '\xF2', '\x2', '\xE', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '\x15', '\x3', '\x2', '\x2', '\x2', '\x6', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\b', '\x45', '\x3', '\x2', '\x2', '\x2', '\n', 'G', 
		'\x3', '\x2', '\x2', '\x2', '\f', '\xAE', '\x3', '\x2', '\x2', '\x2', 
		'\xE', '\xF', '\x5', '\x4', '\x3', '\x2', '\xF', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '\x11', '\x5', '\x6', '\x4', '\x2', '\x11', '\x12', 
		'\a', '\x3', '\x2', '\x2', '\x12', '\x13', '\x5', '\x4', '\x3', '\x2', 
		'\x13', '\x16', '\x3', '\x2', '\x2', '\x2', '\x14', '\x16', '\a', '\x2', 
		'\x2', '\x3', '\x15', '\x10', '\x3', '\x2', '\x2', '\x2', '\x15', '\x14', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'\x17', '\x18', '\a', '\x17', '\x2', '\x2', '\x18', '\x1B', '\a', ',', 
		'\x2', '\x2', '\x19', '\x1A', '\a', '\x1D', '\x2', '\x2', '\x1A', '\x1C', 
		'\a', ',', '\x2', '\x2', '\x1B', '\x19', '\x3', '\x2', '\x2', '\x2', '\x1B', 
		'\x1C', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\x1D', '#', '\a', '\x4', '\x2', '\x2', '\x1E', '\x1F', '\x5', 
		'\b', '\x5', '\x2', '\x1F', ' ', '\a', '\x3', '\x2', '\x2', ' ', '\"', 
		'\x3', '\x2', '\x2', '\x2', '!', '\x1E', '\x3', '\x2', '\x2', '\x2', '\"', 
		'%', '\x3', '\x2', '\x2', '\x2', '#', '!', '\x3', '\x2', '\x2', '\x2', 
		'#', '$', '\x3', '\x2', '\x2', '\x2', '$', '&', '\x3', '\x2', '\x2', '\x2', 
		'%', '#', '\x3', '\x2', '\x2', '\x2', '&', '\'', '\a', '\x5', '\x2', '\x2', 
		'\'', '\a', '\x3', '\x2', '\x2', '\x2', '(', ')', '\a', '-', '\x2', '\x2', 
		')', '\x34', '\a', '\x6', '\x2', '\x2', '*', '/', '\x5', '\n', '\x6', 
		'\x2', '+', ',', '\a', '\a', '\x2', '\x2', ',', '.', '\x5', '\n', '\x6', 
		'\x2', '-', '+', '\x3', '\x2', '\x2', '\x2', '.', '\x31', '\x3', '\x2', 
		'\x2', '\x2', '/', '-', '\x3', '\x2', '\x2', '\x2', '/', '\x30', '\x3', 
		'\x2', '\x2', '\x2', '\x30', '\x33', '\x3', '\x2', '\x2', '\x2', '\x31', 
		'/', '\x3', '\x2', '\x2', '\x2', '\x32', '*', '\x3', '\x2', '\x2', '\x2', 
		'\x33', '\x36', '\x3', '\x2', '\x2', '\x2', '\x34', '\x32', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x35', '\x3', '\x2', '\x2', '\x2', '\x35', '\x37', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x34', '\x3', '\x2', '\x2', '\x2', 
		'\x37', '\x38', '\a', '\b', '\x2', '\x2', '\x38', '\x39', '\a', '\t', 
		'\x2', '\x2', '\x39', ':', '\a', ',', '\x2', '\x2', ':', ';', '\a', '\x4', 
		'\x2', '\x2', ';', '<', '\x5', '\f', '\a', '\x2', '<', '=', '\a', '\x5', 
		'\x2', '\x2', '=', '\x46', '\x3', '\x2', '\x2', '\x2', '>', '?', '\a', 
		'-', '\x2', '\x2', '?', '@', '\a', '\t', '\x2', '\x2', '@', '\x43', '\a', 
		',', '\x2', '\x2', '\x41', '\x42', '\a', '.', '\x2', '\x2', '\x42', '\x44', 
		'\x5', '\f', '\a', '\x2', '\x43', '\x41', '\x3', '\x2', '\x2', '\x2', 
		'\x43', '\x44', '\x3', '\x2', '\x2', '\x2', '\x44', '\x46', '\x3', '\x2', 
		'\x2', '\x2', '\x45', '(', '\x3', '\x2', '\x2', '\x2', '\x45', '>', '\x3', 
		'\x2', '\x2', '\x2', '\x46', '\t', '\x3', '\x2', '\x2', '\x2', 'G', 'H', 
		'\a', '-', '\x2', '\x2', 'H', 'I', '\a', '\t', '\x2', '\x2', 'I', 'J', 
		'\a', ',', '\x2', '\x2', 'J', '\v', '\x3', '\x2', '\x2', '\x2', 'K', 'L', 
		'\b', '\a', '\x1', '\x2', 'L', 'M', '\a', '-', '\x2', '\x2', 'M', 'X', 
		'\a', '\x6', '\x2', '\x2', 'N', 'S', '\x5', '\f', '\a', '\x2', 'O', 'P', 
		'\a', '\a', '\x2', '\x2', 'P', 'R', '\x5', '\f', '\a', '\x2', 'Q', 'O', 
		'\x3', '\x2', '\x2', '\x2', 'R', 'U', '\x3', '\x2', '\x2', '\x2', 'S', 
		'Q', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\x3', '\x2', '\x2', '\x2', 
		'T', 'W', '\x3', '\x2', '\x2', '\x2', 'U', 'S', '\x3', '\x2', '\x2', '\x2', 
		'V', 'N', '\x3', '\x2', '\x2', '\x2', 'W', 'Z', '\x3', '\x2', '\x2', '\x2', 
		'X', 'V', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\x3', '\x2', '\x2', '\x2', 
		'Y', '[', '\x3', '\x2', '\x2', '\x2', 'Z', 'X', '\x3', '\x2', '\x2', '\x2', 
		'[', '\xAF', '\a', '\b', '\x2', '\x2', '\\', ']', '\a', '\x1B', '\x2', 
		'\x2', ']', '^', '\x5', '\f', '\a', '\x2', '^', '_', '\a', '\"', '\x2', 
		'\x2', '_', '`', '\x5', '\f', '\a', '\x2', '`', '\x61', '\a', '\x18', 
		'\x2', '\x2', '\x61', '\x62', '\x5', '\f', '\a', '\x2', '\x62', '\x63', 
		'\a', '\x1A', '\x2', '\x2', '\x63', '\xAF', '\x3', '\x2', '\x2', '\x2', 
		'\x64', '\x65', '\a', '#', '\x2', '\x2', '\x65', '\x66', '\x5', '\f', 
		'\a', '\x2', '\x66', 'g', '\a', ' ', '\x2', '\x2', 'g', 'h', '\x5', '\f', 
		'\a', '\x2', 'h', 'i', '\a', '!', '\x2', '\x2', 'i', '\xAF', '\x3', '\x2', 
		'\x2', '\x2', 'j', 'n', '\a', '\x4', '\x2', '\x2', 'k', 'l', '\x5', '\f', 
		'\a', '\x2', 'l', 'm', '\a', '\x3', '\x2', '\x2', 'm', 'o', '\x3', '\x2', 
		'\x2', '\x2', 'n', 'k', '\x3', '\x2', '\x2', '\x2', 'o', 'p', '\x3', '\x2', 
		'\x2', '\x2', 'p', 'n', '\x3', '\x2', '\x2', '\x2', 'p', 'q', '\x3', '\x2', 
		'\x2', '\x2', 'q', 'r', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\a', '\x5', 
		'\x2', '\x2', 's', '\xAF', '\x3', '\x2', '\x2', '\x2', 't', 'u', '\a', 
		'\x1F', '\x2', '\x2', 'u', 'v', '\a', '-', '\x2', '\x2', 'v', 'w', '\a', 
		'\t', '\x2', '\x2', 'w', 'z', '\a', ',', '\x2', '\x2', 'x', 'y', '\a', 
		'.', '\x2', '\x2', 'y', '{', '\x5', '\f', '\a', '\x2', 'z', 'x', '\x3', 
		'\x2', '\x2', '\x2', 'z', '{', '\x3', '\x2', '\x2', '\x2', '{', '\x86', 
		'\x3', '\x2', '\x2', '\x2', '|', '}', '\a', '\a', '\x2', '\x2', '}', '~', 
		'\a', '-', '\x2', '\x2', '~', '\x7F', '\a', '\t', '\x2', '\x2', '\x7F', 
		'\x82', '\a', ',', '\x2', '\x2', '\x80', '\x81', '\a', '.', '\x2', '\x2', 
		'\x81', '\x83', '\x5', '\f', '\a', '\x2', '\x82', '\x80', '\x3', '\x2', 
		'\x2', '\x2', '\x82', '\x83', '\x3', '\x2', '\x2', '\x2', '\x83', '\x85', 
		'\x3', '\x2', '\x2', '\x2', '\x84', '|', '\x3', '\x2', '\x2', '\x2', '\x85', 
		'\x88', '\x3', '\x2', '\x2', '\x2', '\x86', '\x84', '\x3', '\x2', '\x2', 
		'\x2', '\x86', '\x87', '\x3', '\x2', '\x2', '\x2', '\x87', '\x89', '\x3', 
		'\x2', '\x2', '\x2', '\x88', '\x86', '\x3', '\x2', '\x2', '\x2', '\x89', 
		'\x8A', '\a', '\x1C', '\x2', '\x2', '\x8A', '\xAF', '\x5', '\f', '\a', 
		'\x11', '\x8B', '\x8C', '\a', '$', '\x2', '\x2', '\x8C', '\x8D', '\x5', 
		'\f', '\a', '\x2', '\x8D', '\x95', '\a', '\'', '\x2', '\x2', '\x8E', '\x8F', 
		'\a', '-', '\x2', '\x2', '\x8F', '\x90', '\a', '\t', '\x2', '\x2', '\x90', 
		'\x91', '\a', ',', '\x2', '\x2', '\x91', '\x92', '\a', '/', '\x2', '\x2', 
		'\x92', '\x93', '\x5', '\f', '\a', '\x2', '\x93', '\x94', '\a', '\x3', 
		'\x2', '\x2', '\x94', '\x96', '\x3', '\x2', '\x2', '\x2', '\x95', '\x8E', 
		'\x3', '\x2', '\x2', '\x2', '\x96', '\x97', '\x3', '\x2', '\x2', '\x2', 
		'\x97', '\x95', '\x3', '\x2', '\x2', '\x2', '\x97', '\x98', '\x3', '\x2', 
		'\x2', '\x2', '\x98', '\x99', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9A', 
		'\a', '%', '\x2', '\x2', '\x9A', '\xAF', '\x3', '\x2', '\x2', '\x2', '\x9B', 
		'\x9C', '\a', '&', '\x2', '\x2', '\x9C', '\xAF', '\a', ',', '\x2', '\x2', 
		'\x9D', '\x9E', '\a', '\f', '\x2', '\x2', '\x9E', '\xAF', '\x5', '\f', 
		'\a', '\xE', '\x9F', '\xA0', '\a', '\x1E', '\x2', '\x2', '\xA0', '\xAF', 
		'\x5', '\f', '\a', '\r', '\xA1', '\xA2', '\a', '(', '\x2', '\x2', '\xA2', 
		'\xAF', '\x5', '\f', '\a', '\t', '\xA3', '\xA4', '\a', '\x6', '\x2', '\x2', 
		'\xA4', '\xA5', '\x5', '\f', '\a', '\x2', '\xA5', '\xA6', '\a', '\b', 
		'\x2', '\x2', '\xA6', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xAF', 
		'\a', '-', '\x2', '\x2', '\xA8', '\xAF', '\a', '+', '\x2', '\x2', '\xA9', 
		'\xAF', '\a', '*', '\x2', '\x2', '\xAA', '\xAF', '\t', '\x2', '\x2', '\x2', 
		'\xAB', '\xAC', '\a', '-', '\x2', '\x2', '\xAC', '\xAD', '\a', '.', '\x2', 
		'\x2', '\xAD', '\xAF', '\x5', '\f', '\a', '\x3', '\xAE', 'K', '\x3', '\x2', 
		'\x2', '\x2', '\xAE', '\\', '\x3', '\x2', '\x2', '\x2', '\xAE', '\x64', 
		'\x3', '\x2', '\x2', '\x2', '\xAE', 'j', '\x3', '\x2', '\x2', '\x2', '\xAE', 
		't', '\x3', '\x2', '\x2', '\x2', '\xAE', '\x8B', '\x3', '\x2', '\x2', 
		'\x2', '\xAE', '\x9B', '\x3', '\x2', '\x2', '\x2', '\xAE', '\x9D', '\x3', 
		'\x2', '\x2', '\x2', '\xAE', '\x9F', '\x3', '\x2', '\x2', '\x2', '\xAE', 
		'\xA1', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xA3', '\x3', '\x2', '\x2', 
		'\x2', '\xAE', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xA8', '\x3', 
		'\x2', '\x2', '\x2', '\xAE', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xAE', 
		'\xAA', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xAB', '\x3', '\x2', '\x2', 
		'\x2', '\xAF', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xB1', '\f', 
		'\f', '\x2', '\x2', '\xB1', '\xB2', '\t', '\x3', '\x2', '\x2', '\xB2', 
		'\xD0', '\x5', '\f', '\a', '\r', '\xB3', '\xB4', '\f', '\v', '\x2', '\x2', 
		'\xB4', '\xB5', '\t', '\x4', '\x2', '\x2', '\xB5', '\xD0', '\x5', '\f', 
		'\a', '\f', '\xB6', '\xB7', '\f', '\n', '\x2', '\x2', '\xB7', '\xB8', 
		'\t', '\x5', '\x2', '\x2', '\xB8', '\xD0', '\x5', '\f', '\a', '\v', '\xB9', 
		'\xBC', '\f', '\x16', '\x2', '\x2', '\xBA', '\xBB', '\a', '\n', '\x2', 
		'\x2', '\xBB', '\xBD', '\a', ',', '\x2', '\x2', '\xBC', '\xBA', '\x3', 
		'\x2', '\x2', '\x2', '\xBC', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xBD', 
		'\xBE', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xBF', '\a', '\v', '\x2', 
		'\x2', '\xBF', '\xC0', '\a', '-', '\x2', '\x2', '\xC0', '\xCB', '\a', 
		'\x6', '\x2', '\x2', '\xC1', '\xC6', '\x5', '\f', '\a', '\x2', '\xC2', 
		'\xC3', '\a', '\a', '\x2', '\x2', '\xC3', '\xC5', '\x5', '\f', '\a', '\x2', 
		'\xC4', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC8', '\x3', '\x2', 
		'\x2', '\x2', '\xC6', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC7', 
		'\x3', '\x2', '\x2', '\x2', '\xC7', '\xCA', '\x3', '\x2', '\x2', '\x2', 
		'\xC8', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xC1', '\x3', '\x2', 
		'\x2', '\x2', '\xCA', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xC9', 
		'\x3', '\x2', '\x2', '\x2', '\xCB', '\xCC', '\x3', '\x2', '\x2', '\x2', 
		'\xCC', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCB', '\x3', '\x2', 
		'\x2', '\x2', '\xCE', '\xD0', '\a', '\b', '\x2', '\x2', '\xCF', '\xB0', 
		'\x3', '\x2', '\x2', '\x2', '\xCF', '\xB3', '\x3', '\x2', '\x2', '\x2', 
		'\xCF', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xB9', '\x3', '\x2', 
		'\x2', '\x2', '\xD0', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xCF', 
		'\x3', '\x2', '\x2', '\x2', '\xD1', '\xD2', '\x3', '\x2', '\x2', '\x2', 
		'\xD2', '\r', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD1', '\x3', '\x2', 
		'\x2', '\x2', '\x16', '\x15', '\x1B', '#', '/', '\x34', '\x43', '\x45', 
		'S', 'X', 'p', 'z', '\x82', '\x86', '\x97', '\xAE', '\xBC', '\xC6', '\xCB', 
		'\xCF', '\xD1',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
