//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Me\Cybernetic\ComputerScience\4Year\1er semestre\COMP\Compiler\Cool - Ivan\Code\CoolCompiler\Cool\Parsing\Cool.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class CoolParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		WHITESPACE=18, BLOCK_COMMENT=19, LINE_COMMENT=20, CLASS=21, ELSE=22, FALSE=23, 
		FI=24, IF=25, IN=26, INHERITS=27, ISVOID=28, LET=29, LOOP=30, POOL=31, 
		THEN=32, WHILE=33, CASE=34, ESAC=35, NEW=36, OF=37, NOT=38, TRUE=39, STRING=40, 
		INT=41, TYPE=42, ID=43, ASSIGNMENT=44, IMPLY=45;
	public const int
		RULE_program = 0, RULE_programBlocks = 1, RULE_classDefine = 2, RULE_feature = 3, 
		RULE_method = 4, RULE_property = 5, RULE_formal = 6, RULE_expression = 7;
	public static readonly string[] ruleNames = {
		"program", "programBlocks", "classDefine", "feature", "method", "property", 
		"formal", "expression"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'{'", "'}'", "'('", "','", "')'", "':'", "'@'", "'.'", "'~'", 
		"'*'", "'/'", "'+'", "'-'", "'<='", "'<'", "'='", null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, "'<-'", "'=>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "WHITESPACE", "BLOCK_COMMENT", "LINE_COMMENT", 
		"CLASS", "ELSE", "FALSE", "FI", "IF", "IN", "INHERITS", "ISVOID", "LET", 
		"LOOP", "POOL", "THEN", "WHILE", "CASE", "ESAC", "NEW", "OF", "NOT", "TRUE", 
		"STRING", "INT", "TYPE", "ID", "ASSIGNMENT", "IMPLY"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Cool.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CoolParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CoolParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CoolParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ProgramBlocksContext programBlocks() {
			return GetRuleContext<ProgramBlocksContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 16; programBlocks();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramBlocksContext : ParserRuleContext {
		public ClassDefineContext classDefine() {
			return GetRuleContext<ClassDefineContext>(0);
		}
		public ProgramBlocksContext programBlocks() {
			return GetRuleContext<ProgramBlocksContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(CoolParser.Eof, 0); }
		public ProgramBlocksContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programBlocks; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgramBlocks(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramBlocksContext programBlocks() {
		ProgramBlocksContext _localctx = new ProgramBlocksContext(Context, State);
		EnterRule(_localctx, 2, RULE_programBlocks);
		try {
			State = 23;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CLASS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 18; classDefine();
				State = 19; Match(T__0);
				State = 20; programBlocks();
				}
				break;
			case Eof:
				EnterOuterAlt(_localctx, 2);
				{
				State = 22; Match(Eof);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDefineContext : ParserRuleContext {
		public ITerminalNode CLASS() { return GetToken(CoolParser.CLASS, 0); }
		public ITerminalNode[] TYPE() { return GetTokens(CoolParser.TYPE); }
		public ITerminalNode TYPE(int i) {
			return GetToken(CoolParser.TYPE, i);
		}
		public ITerminalNode INHERITS() { return GetToken(CoolParser.INHERITS, 0); }
		public FeatureContext[] feature() {
			return GetRuleContexts<FeatureContext>();
		}
		public FeatureContext feature(int i) {
			return GetRuleContext<FeatureContext>(i);
		}
		public ClassDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDefine; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDefineContext classDefine() {
		ClassDefineContext _localctx = new ClassDefineContext(Context, State);
		EnterRule(_localctx, 4, RULE_classDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 25; Match(CLASS);
			State = 26; Match(TYPE);
			State = 29;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INHERITS) {
				{
				State = 27; Match(INHERITS);
				State = 28; Match(TYPE);
				}
			}

			State = 31; Match(T__1);
			State = 37;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ID) {
				{
				{
				State = 32; feature();
				State = 33; Match(T__0);
				}
				}
				State = 39;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 40; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FeatureContext : ParserRuleContext {
		public MethodContext method() {
			return GetRuleContext<MethodContext>(0);
		}
		public PropertyContext property() {
			return GetRuleContext<PropertyContext>(0);
		}
		public FeatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_feature; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFeature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FeatureContext feature() {
		FeatureContext _localctx = new FeatureContext(Context, State);
		EnterRule(_localctx, 6, RULE_feature);
		try {
			State = 44;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 42; method();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 43; property();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(CoolParser.ID, 0); }
		public ITerminalNode TYPE() { return GetToken(CoolParser.TYPE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FormalContext[] formal() {
			return GetRuleContexts<FormalContext>();
		}
		public FormalContext formal(int i) {
			return GetRuleContext<FormalContext>(i);
		}
		public MethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodContext method() {
		MethodContext _localctx = new MethodContext(Context, State);
		EnterRule(_localctx, 8, RULE_method);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46; Match(ID);
			State = 47; Match(T__3);
			State = 58;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ID) {
				{
				{
				State = 48; formal();
				State = 53;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__4) {
					{
					{
					State = 49; Match(T__4);
					State = 50; formal();
					}
					}
					State = 55;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 60;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 61; Match(T__5);
			State = 62; Match(T__6);
			State = 63; Match(TYPE);
			State = 64; Match(T__1);
			State = 65; expression(0);
			State = 66; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : ParserRuleContext {
		public FormalContext formal() {
			return GetRuleContext<FormalContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(CoolParser.ASSIGNMENT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(Context, State);
		EnterRule(_localctx, 10, RULE_property);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68; formal();
			State = 71;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGNMENT) {
				{
				State = 69; Match(ASSIGNMENT);
				State = 70; expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(CoolParser.ID, 0); }
		public ITerminalNode TYPE() { return GetToken(CoolParser.TYPE, 0); }
		public FormalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formal; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalContext formal() {
		FormalContext _localctx = new FormalContext(Context, State);
		EnterRule(_localctx, 12, RULE_formal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73; Match(ID);
			State = 74; Match(T__6);
			State = 75; Match(TYPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParenthesesContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesesContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParentheses(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparissonContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ComparissonContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisson(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DispatchExplicitContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode ID() { return GetToken(CoolParser.ID, 0); }
		public ITerminalNode TYPE() { return GetToken(CoolParser.TYPE, 0); }
		public DispatchExplicitContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDispatchExplicit(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntContext : ExpressionContext {
		public ITerminalNode INT() { return GetToken(CoolParser.INT, 0); }
		public IntContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsvoidContext : ExpressionContext {
		public ITerminalNode ISVOID() { return GetToken(CoolParser.ISVOID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsvoidContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsvoid(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BlockContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DispatchImplicitContext : ExpressionContext {
		public ITerminalNode ID() { return GetToken(CoolParser.ID, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DispatchImplicitContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDispatchImplicit(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileContext : ExpressionContext {
		public ITerminalNode WHILE() { return GetToken(CoolParser.WHILE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode LOOP() { return GetToken(CoolParser.LOOP, 0); }
		public ITerminalNode POOL() { return GetToken(CoolParser.POOL, 0); }
		public WhileContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdContext : ExpressionContext {
		public ITerminalNode ID() { return GetToken(CoolParser.ID, 0); }
		public IdContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolNotContext : ExpressionContext {
		public ITerminalNode NOT() { return GetToken(CoolParser.NOT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BoolNotContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArithmeticContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArithmeticContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmetic(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentContext : ExpressionContext {
		public ITerminalNode ID() { return GetToken(CoolParser.ID, 0); }
		public ITerminalNode ASSIGNMENT() { return GetToken(CoolParser.ASSIGNMENT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewContext : ExpressionContext {
		public ITerminalNode NEW() { return GetToken(CoolParser.NEW, 0); }
		public ITerminalNode TYPE() { return GetToken(CoolParser.TYPE, 0); }
		public NewContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNew(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LetInContext : ExpressionContext {
		public ITerminalNode LET() { return GetToken(CoolParser.LET, 0); }
		public ITerminalNode IN() { return GetToken(CoolParser.IN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		public LetInContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetIn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfContext : ExpressionContext {
		public ITerminalNode IF() { return GetToken(CoolParser.IF, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(CoolParser.THEN, 0); }
		public ITerminalNode ELSE() { return GetToken(CoolParser.ELSE, 0); }
		public ITerminalNode FI() { return GetToken(CoolParser.FI, 0); }
		public IfContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringContext : ExpressionContext {
		public ITerminalNode STRING() { return GetToken(CoolParser.STRING, 0); }
		public StringContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanContext : ExpressionContext {
		public IToken value;
		public ITerminalNode TRUE() { return GetToken(CoolParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(CoolParser.FALSE, 0); }
		public BooleanContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegativeContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NegativeContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegative(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseContext : ExpressionContext {
		public ITerminalNode CASE() { return GetToken(CoolParser.CASE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode OF() { return GetToken(CoolParser.OF, 0); }
		public ITerminalNode ESAC() { return GetToken(CoolParser.ESAC, 0); }
		public FormalContext[] formal() {
			return GetRuleContexts<FormalContext>();
		}
		public FormalContext formal(int i) {
			return GetRuleContext<FormalContext>(i);
		}
		public ITerminalNode[] IMPLY() { return GetTokens(CoolParser.IMPLY); }
		public ITerminalNode IMPLY(int i) {
			return GetToken(CoolParser.IMPLY, i);
		}
		public CaseContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 14;
		EnterRecursionRule(_localctx, 14, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 164;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				_localctx = new DispatchImplicitContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 78; Match(ID);
				State = 79; Match(T__3);
				State = 90;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__3) | (1L << T__9) | (1L << FALSE) | (1L << IF) | (1L << ISVOID) | (1L << LET) | (1L << WHILE) | (1L << CASE) | (1L << NEW) | (1L << NOT) | (1L << TRUE) | (1L << STRING) | (1L << INT) | (1L << ID))) != 0)) {
					{
					{
					State = 80; expression(0);
					State = 85;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__4) {
						{
						{
						State = 81; Match(T__4);
						State = 82; expression(0);
						}
						}
						State = 87;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					}
					State = 92;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 93; Match(T__5);
				}
				break;
			case 2:
				{
				_localctx = new IfContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 94; Match(IF);
				State = 95; expression(0);
				State = 96; Match(THEN);
				State = 97; expression(0);
				State = 98; Match(ELSE);
				State = 99; expression(0);
				State = 100; Match(FI);
				}
				break;
			case 3:
				{
				_localctx = new WhileContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 102; Match(WHILE);
				State = 103; expression(0);
				State = 104; Match(LOOP);
				State = 105; expression(0);
				State = 106; Match(POOL);
				}
				break;
			case 4:
				{
				_localctx = new BlockContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 108; Match(T__1);
				State = 112;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 109; expression(0);
					State = 110; Match(T__0);
					}
					}
					State = 114;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__3) | (1L << T__9) | (1L << FALSE) | (1L << IF) | (1L << ISVOID) | (1L << LET) | (1L << WHILE) | (1L << CASE) | (1L << NEW) | (1L << NOT) | (1L << TRUE) | (1L << STRING) | (1L << INT) | (1L << ID))) != 0) );
				State = 116; Match(T__2);
				}
				break;
			case 5:
				{
				_localctx = new LetInContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 118; Match(LET);
				State = 120;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ID) {
					{
					State = 119; property();
					}
				}

				State = 126;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__4) {
					{
					{
					State = 122; Match(T__4);
					State = 123; property();
					}
					}
					State = 128;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 129; Match(IN);
				State = 130; expression(15);
				}
				break;
			case 6:
				{
				_localctx = new CaseContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 131; Match(CASE);
				State = 132; expression(0);
				State = 133; Match(OF);
				State = 139;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 134; formal();
					State = 135; Match(IMPLY);
					State = 136; expression(0);
					State = 137; Match(T__0);
					}
					}
					State = 141;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==ID );
				State = 143; Match(ESAC);
				}
				break;
			case 7:
				{
				_localctx = new NewContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 145; Match(NEW);
				State = 146; Match(TYPE);
				}
				break;
			case 8:
				{
				_localctx = new NegativeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 147; Match(T__9);
				State = 148; expression(12);
				}
				break;
			case 9:
				{
				_localctx = new IsvoidContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 149; Match(ISVOID);
				State = 150; expression(11);
				}
				break;
			case 10:
				{
				_localctx = new BoolNotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 151; Match(NOT);
				State = 152; expression(7);
				}
				break;
			case 11:
				{
				_localctx = new ParenthesesContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 153; Match(T__3);
				State = 154; expression(0);
				State = 155; Match(T__5);
				}
				break;
			case 12:
				{
				_localctx = new IdContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 157; Match(ID);
				}
				break;
			case 13:
				{
				_localctx = new IntContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 158; Match(INT);
				}
				break;
			case 14:
				{
				_localctx = new StringContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 159; Match(STRING);
				}
				break;
			case 15:
				{
				_localctx = new BooleanContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 160;
				((BooleanContext)_localctx).value = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FALSE || _la==TRUE) ) {
					((BooleanContext)_localctx).value = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 16:
				{
				_localctx = new AssignmentContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 161; Match(ID);
				State = 162; Match(ASSIGNMENT);
				State = 163; expression(1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 199;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 197;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
					case 1:
						{
						_localctx = new ArithmeticContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 166;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 167;
						((ArithmeticContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__10 || _la==T__11) ) {
							((ArithmeticContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 168; expression(11);
						}
						break;
					case 2:
						{
						_localctx = new ArithmeticContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 169;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 170;
						((ArithmeticContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__12 || _la==T__13) ) {
							((ArithmeticContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 171; expression(10);
						}
						break;
					case 3:
						{
						_localctx = new ComparissonContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 172;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 173;
						((ComparissonContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__14) | (1L << T__15) | (1L << T__16))) != 0)) ) {
							((ComparissonContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 174; expression(9);
						}
						break;
					case 4:
						{
						_localctx = new DispatchExplicitContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 175;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 178;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==T__7) {
							{
							State = 176; Match(T__7);
							State = 177; Match(TYPE);
							}
						}

						State = 180; Match(T__8);
						State = 181; Match(ID);
						State = 182; Match(T__3);
						State = 193;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__3) | (1L << T__9) | (1L << FALSE) | (1L << IF) | (1L << ISVOID) | (1L << LET) | (1L << WHILE) | (1L << CASE) | (1L << NEW) | (1L << NOT) | (1L << TRUE) | (1L << STRING) | (1L << INT) | (1L << ID))) != 0)) {
							{
							{
							State = 183; expression(0);
							State = 188;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la==T__4) {
								{
								{
								State = 184; Match(T__4);
								State = 185; expression(0);
								}
								}
								State = 190;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
							}
							}
							State = 195;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 196; Match(T__5);
						}
						break;
					}
					} 
				}
				State = 201;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 7: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 10);
		case 1: return Precpred(Context, 9);
		case 2: return Precpred(Context, 8);
		case 3: return Precpred(Context, 20);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '/', '\xCD', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x1A', 
		'\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', 
		'\x4', ' ', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\a', '\x4', '&', '\n', '\x4', '\f', '\x4', '\xE', '\x4', ')', 
		'\v', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x5', 
		'\x5', '/', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\a', '\x6', '\x36', '\n', '\x6', '\f', '\x6', '\xE', 
		'\x6', '\x39', '\v', '\x6', '\a', '\x6', ';', '\n', '\x6', '\f', '\x6', 
		'\xE', '\x6', '>', '\v', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x5', '\a', 'J', '\n', '\a', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\a', '\t', 'V', '\n', '\t', '\f', '\t', 
		'\xE', '\t', 'Y', '\v', '\t', '\a', '\t', '[', '\n', '\t', '\f', '\t', 
		'\xE', '\t', '^', '\v', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x6', '\t', 
		's', '\n', '\t', '\r', '\t', '\xE', '\t', 't', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x5', '\t', '{', '\n', '\t', '\x3', '\t', '\x3', 
		'\t', '\a', '\t', '\x7F', '\n', '\t', '\f', '\t', '\xE', '\t', '\x82', 
		'\v', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x6', '\t', '\x8E', '\n', '\t', '\r', '\t', '\xE', '\t', '\x8F', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\xA7', 
		'\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x5', '\t', '\xB5', '\n', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', 
		'\t', '\xBD', '\n', '\t', '\f', '\t', '\xE', '\t', '\xC0', '\v', '\t', 
		'\a', '\t', '\xC2', '\n', '\t', '\f', '\t', '\xE', '\t', '\xC5', '\v', 
		'\t', '\x3', '\t', '\a', '\t', '\xC8', '\n', '\t', '\f', '\t', '\xE', 
		'\t', '\xCB', '\v', '\t', '\x3', '\t', '\x2', '\x3', '\x10', '\n', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x2', '\x6', '\x4', '\x2', 
		'\x19', '\x19', ')', ')', '\x3', '\x2', '\r', '\xE', '\x3', '\x2', '\xF', 
		'\x10', '\x3', '\x2', '\x11', '\x13', '\x2', '\xE7', '\x2', '\x12', '\x3', 
		'\x2', '\x2', '\x2', '\x4', '\x19', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\b', '.', '\x3', '\x2', '\x2', '\x2', 
		'\n', '\x30', '\x3', '\x2', '\x2', '\x2', '\f', '\x46', '\x3', '\x2', 
		'\x2', '\x2', '\xE', 'K', '\x3', '\x2', '\x2', '\x2', '\x10', '\xA6', 
		'\x3', '\x2', '\x2', '\x2', '\x12', '\x13', '\x5', '\x4', '\x3', '\x2', 
		'\x13', '\x3', '\x3', '\x2', '\x2', '\x2', '\x14', '\x15', '\x5', '\x6', 
		'\x4', '\x2', '\x15', '\x16', '\a', '\x3', '\x2', '\x2', '\x16', '\x17', 
		'\x5', '\x4', '\x3', '\x2', '\x17', '\x1A', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\x1A', '\a', '\x2', '\x2', '\x3', '\x19', '\x14', '\x3', '\x2', 
		'\x2', '\x2', '\x19', '\x18', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '\x1B', '\x1C', '\a', '\x17', '\x2', '\x2', 
		'\x1C', '\x1F', '\a', ',', '\x2', '\x2', '\x1D', '\x1E', '\a', '\x1D', 
		'\x2', '\x2', '\x1E', ' ', '\a', ',', '\x2', '\x2', '\x1F', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\x1F', ' ', '\x3', '\x2', '\x2', '\x2', ' ', '!', 
		'\x3', '\x2', '\x2', '\x2', '!', '\'', '\a', '\x4', '\x2', '\x2', '\"', 
		'#', '\x5', '\b', '\x5', '\x2', '#', '$', '\a', '\x3', '\x2', '\x2', '$', 
		'&', '\x3', '\x2', '\x2', '\x2', '%', '\"', '\x3', '\x2', '\x2', '\x2', 
		'&', ')', '\x3', '\x2', '\x2', '\x2', '\'', '%', '\x3', '\x2', '\x2', 
		'\x2', '\'', '(', '\x3', '\x2', '\x2', '\x2', '(', '*', '\x3', '\x2', 
		'\x2', '\x2', ')', '\'', '\x3', '\x2', '\x2', '\x2', '*', '+', '\a', '\x5', 
		'\x2', '\x2', '+', '\a', '\x3', '\x2', '\x2', '\x2', ',', '/', '\x5', 
		'\n', '\x6', '\x2', '-', '/', '\x5', '\f', '\a', '\x2', '.', ',', '\x3', 
		'\x2', '\x2', '\x2', '.', '-', '\x3', '\x2', '\x2', '\x2', '/', '\t', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\a', '-', '\x2', '\x2', '\x31', 
		'<', '\a', '\x6', '\x2', '\x2', '\x32', '\x37', '\x5', '\xE', '\b', '\x2', 
		'\x33', '\x34', '\a', '\a', '\x2', '\x2', '\x34', '\x36', '\x5', '\xE', 
		'\b', '\x2', '\x35', '\x33', '\x3', '\x2', '\x2', '\x2', '\x36', '\x39', 
		'\x3', '\x2', '\x2', '\x2', '\x37', '\x35', '\x3', '\x2', '\x2', '\x2', 
		'\x37', '\x38', '\x3', '\x2', '\x2', '\x2', '\x38', ';', '\x3', '\x2', 
		'\x2', '\x2', '\x39', '\x37', '\x3', '\x2', '\x2', '\x2', ':', '\x32', 
		'\x3', '\x2', '\x2', '\x2', ';', '>', '\x3', '\x2', '\x2', '\x2', '<', 
		':', '\x3', '\x2', '\x2', '\x2', '<', '=', '\x3', '\x2', '\x2', '\x2', 
		'=', '?', '\x3', '\x2', '\x2', '\x2', '>', '<', '\x3', '\x2', '\x2', '\x2', 
		'?', '@', '\a', '\b', '\x2', '\x2', '@', '\x41', '\a', '\t', '\x2', '\x2', 
		'\x41', '\x42', '\a', ',', '\x2', '\x2', '\x42', '\x43', '\a', '\x4', 
		'\x2', '\x2', '\x43', '\x44', '\x5', '\x10', '\t', '\x2', '\x44', '\x45', 
		'\a', '\x5', '\x2', '\x2', '\x45', '\v', '\x3', '\x2', '\x2', '\x2', '\x46', 
		'I', '\x5', '\xE', '\b', '\x2', 'G', 'H', '\a', '.', '\x2', '\x2', 'H', 
		'J', '\x5', '\x10', '\t', '\x2', 'I', 'G', '\x3', '\x2', '\x2', '\x2', 
		'I', 'J', '\x3', '\x2', '\x2', '\x2', 'J', '\r', '\x3', '\x2', '\x2', 
		'\x2', 'K', 'L', '\a', '-', '\x2', '\x2', 'L', 'M', '\a', '\t', '\x2', 
		'\x2', 'M', 'N', '\a', ',', '\x2', '\x2', 'N', '\xF', '\x3', '\x2', '\x2', 
		'\x2', 'O', 'P', '\b', '\t', '\x1', '\x2', 'P', 'Q', '\a', '-', '\x2', 
		'\x2', 'Q', '\\', '\a', '\x6', '\x2', '\x2', 'R', 'W', '\x5', '\x10', 
		'\t', '\x2', 'S', 'T', '\a', '\a', '\x2', '\x2', 'T', 'V', '\x5', '\x10', 
		'\t', '\x2', 'U', 'S', '\x3', '\x2', '\x2', '\x2', 'V', 'Y', '\x3', '\x2', 
		'\x2', '\x2', 'W', 'U', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\x3', '\x2', 
		'\x2', '\x2', 'X', '[', '\x3', '\x2', '\x2', '\x2', 'Y', 'W', '\x3', '\x2', 
		'\x2', '\x2', 'Z', 'R', '\x3', '\x2', '\x2', '\x2', '[', '^', '\x3', '\x2', 
		'\x2', '\x2', '\\', 'Z', '\x3', '\x2', '\x2', '\x2', '\\', ']', '\x3', 
		'\x2', '\x2', '\x2', ']', '_', '\x3', '\x2', '\x2', '\x2', '^', '\\', 
		'\x3', '\x2', '\x2', '\x2', '_', '\xA7', '\a', '\b', '\x2', '\x2', '`', 
		'\x61', '\a', '\x1B', '\x2', '\x2', '\x61', '\x62', '\x5', '\x10', '\t', 
		'\x2', '\x62', '\x63', '\a', '\"', '\x2', '\x2', '\x63', '\x64', '\x5', 
		'\x10', '\t', '\x2', '\x64', '\x65', '\a', '\x18', '\x2', '\x2', '\x65', 
		'\x66', '\x5', '\x10', '\t', '\x2', '\x66', 'g', '\a', '\x1A', '\x2', 
		'\x2', 'g', '\xA7', '\x3', '\x2', '\x2', '\x2', 'h', 'i', '\a', '#', '\x2', 
		'\x2', 'i', 'j', '\x5', '\x10', '\t', '\x2', 'j', 'k', '\a', ' ', '\x2', 
		'\x2', 'k', 'l', '\x5', '\x10', '\t', '\x2', 'l', 'm', '\a', '!', '\x2', 
		'\x2', 'm', '\xA7', '\x3', '\x2', '\x2', '\x2', 'n', 'r', '\a', '\x4', 
		'\x2', '\x2', 'o', 'p', '\x5', '\x10', '\t', '\x2', 'p', 'q', '\a', '\x3', 
		'\x2', '\x2', 'q', 's', '\x3', '\x2', '\x2', '\x2', 'r', 'o', '\x3', '\x2', 
		'\x2', '\x2', 's', 't', '\x3', '\x2', '\x2', '\x2', 't', 'r', '\x3', '\x2', 
		'\x2', '\x2', 't', 'u', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\x3', '\x2', 
		'\x2', '\x2', 'v', 'w', '\a', '\x5', '\x2', '\x2', 'w', '\xA7', '\x3', 
		'\x2', '\x2', '\x2', 'x', 'z', '\a', '\x1F', '\x2', '\x2', 'y', '{', '\x5', 
		'\f', '\a', '\x2', 'z', 'y', '\x3', '\x2', '\x2', '\x2', 'z', '{', '\x3', 
		'\x2', '\x2', '\x2', '{', '\x80', '\x3', '\x2', '\x2', '\x2', '|', '}', 
		'\a', '\a', '\x2', '\x2', '}', '\x7F', '\x5', '\f', '\a', '\x2', '~', 
		'|', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x82', '\x3', '\x2', '\x2', 
		'\x2', '\x80', '~', '\x3', '\x2', '\x2', '\x2', '\x80', '\x81', '\x3', 
		'\x2', '\x2', '\x2', '\x81', '\x83', '\x3', '\x2', '\x2', '\x2', '\x82', 
		'\x80', '\x3', '\x2', '\x2', '\x2', '\x83', '\x84', '\a', '\x1C', '\x2', 
		'\x2', '\x84', '\xA7', '\x5', '\x10', '\t', '\x11', '\x85', '\x86', '\a', 
		'$', '\x2', '\x2', '\x86', '\x87', '\x5', '\x10', '\t', '\x2', '\x87', 
		'\x8D', '\a', '\'', '\x2', '\x2', '\x88', '\x89', '\x5', '\xE', '\b', 
		'\x2', '\x89', '\x8A', '\a', '/', '\x2', '\x2', '\x8A', '\x8B', '\x5', 
		'\x10', '\t', '\x2', '\x8B', '\x8C', '\a', '\x3', '\x2', '\x2', '\x8C', 
		'\x8E', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x88', '\x3', '\x2', '\x2', 
		'\x2', '\x8E', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x8D', '\x3', 
		'\x2', '\x2', '\x2', '\x8F', '\x90', '\x3', '\x2', '\x2', '\x2', '\x90', 
		'\x91', '\x3', '\x2', '\x2', '\x2', '\x91', '\x92', '\a', '%', '\x2', 
		'\x2', '\x92', '\xA7', '\x3', '\x2', '\x2', '\x2', '\x93', '\x94', '\a', 
		'&', '\x2', '\x2', '\x94', '\xA7', '\a', ',', '\x2', '\x2', '\x95', '\x96', 
		'\a', '\f', '\x2', '\x2', '\x96', '\xA7', '\x5', '\x10', '\t', '\xE', 
		'\x97', '\x98', '\a', '\x1E', '\x2', '\x2', '\x98', '\xA7', '\x5', '\x10', 
		'\t', '\r', '\x99', '\x9A', '\a', '(', '\x2', '\x2', '\x9A', '\xA7', '\x5', 
		'\x10', '\t', '\t', '\x9B', '\x9C', '\a', '\x6', '\x2', '\x2', '\x9C', 
		'\x9D', '\x5', '\x10', '\t', '\x2', '\x9D', '\x9E', '\a', '\b', '\x2', 
		'\x2', '\x9E', '\xA7', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA7', '\a', 
		'-', '\x2', '\x2', '\xA0', '\xA7', '\a', '+', '\x2', '\x2', '\xA1', '\xA7', 
		'\a', '*', '\x2', '\x2', '\xA2', '\xA7', '\t', '\x2', '\x2', '\x2', '\xA3', 
		'\xA4', '\a', '-', '\x2', '\x2', '\xA4', '\xA5', '\a', '.', '\x2', '\x2', 
		'\xA5', '\xA7', '\x5', '\x10', '\t', '\x3', '\xA6', 'O', '\x3', '\x2', 
		'\x2', '\x2', '\xA6', '`', '\x3', '\x2', '\x2', '\x2', '\xA6', 'h', '\x3', 
		'\x2', '\x2', '\x2', '\xA6', 'n', '\x3', '\x2', '\x2', '\x2', '\xA6', 
		'x', '\x3', '\x2', '\x2', '\x2', '\xA6', '\x85', '\x3', '\x2', '\x2', 
		'\x2', '\xA6', '\x93', '\x3', '\x2', '\x2', '\x2', '\xA6', '\x95', '\x3', 
		'\x2', '\x2', '\x2', '\xA6', '\x97', '\x3', '\x2', '\x2', '\x2', '\xA6', 
		'\x99', '\x3', '\x2', '\x2', '\x2', '\xA6', '\x9B', '\x3', '\x2', '\x2', 
		'\x2', '\xA6', '\x9F', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA0', '\x3', 
		'\x2', '\x2', '\x2', '\xA6', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA6', 
		'\xA2', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA3', '\x3', '\x2', '\x2', 
		'\x2', '\xA7', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xA9', '\f', 
		'\f', '\x2', '\x2', '\xA9', '\xAA', '\t', '\x3', '\x2', '\x2', '\xAA', 
		'\xC8', '\x5', '\x10', '\t', '\r', '\xAB', '\xAC', '\f', '\v', '\x2', 
		'\x2', '\xAC', '\xAD', '\t', '\x4', '\x2', '\x2', '\xAD', '\xC8', '\x5', 
		'\x10', '\t', '\f', '\xAE', '\xAF', '\f', '\n', '\x2', '\x2', '\xAF', 
		'\xB0', '\t', '\x5', '\x2', '\x2', '\xB0', '\xC8', '\x5', '\x10', '\t', 
		'\v', '\xB1', '\xB4', '\f', '\x16', '\x2', '\x2', '\xB2', '\xB3', '\a', 
		'\n', '\x2', '\x2', '\xB3', '\xB5', '\a', ',', '\x2', '\x2', '\xB4', '\xB2', 
		'\x3', '\x2', '\x2', '\x2', '\xB4', '\xB5', '\x3', '\x2', '\x2', '\x2', 
		'\xB5', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB7', '\a', '\v', 
		'\x2', '\x2', '\xB7', '\xB8', '\a', '-', '\x2', '\x2', '\xB8', '\xC3', 
		'\a', '\x6', '\x2', '\x2', '\xB9', '\xBE', '\x5', '\x10', '\t', '\x2', 
		'\xBA', '\xBB', '\a', '\a', '\x2', '\x2', '\xBB', '\xBD', '\x5', '\x10', 
		'\t', '\x2', '\xBC', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xC0', 
		'\x3', '\x2', '\x2', '\x2', '\xBE', '\xBC', '\x3', '\x2', '\x2', '\x2', 
		'\xBE', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xC2', '\x3', '\x2', 
		'\x2', '\x2', '\xC0', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xB9', 
		'\x3', '\x2', '\x2', '\x2', '\xC2', '\xC5', '\x3', '\x2', '\x2', '\x2', 
		'\xC3', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC4', '\x3', '\x2', 
		'\x2', '\x2', '\xC4', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC3', 
		'\x3', '\x2', '\x2', '\x2', '\xC6', '\xC8', '\a', '\b', '\x2', '\x2', 
		'\xC7', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xAB', '\x3', '\x2', 
		'\x2', '\x2', '\xC7', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xB1', 
		'\x3', '\x2', '\x2', '\x2', '\xC8', '\xCB', '\x3', '\x2', '\x2', '\x2', 
		'\xC9', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xCA', '\x3', '\x2', 
		'\x2', '\x2', '\xCA', '\x11', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xC9', 
		'\x3', '\x2', '\x2', '\x2', '\x15', '\x19', '\x1F', '\'', '.', '\x37', 
		'<', 'I', 'W', '\\', 't', 'z', '\x80', '\x8F', '\xA6', '\xB4', '\xBE', 
		'\xC3', '\xC7', '\xC9',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
